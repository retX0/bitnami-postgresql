name: Auto update and build docker

on: 
  workflow_dispatch:
  schedule:
    - cron: '* */2 * * *' # 每2小时触发, 对于一些更新不那么频繁的项目可以设置为每天一次, 低碳一点

env:
  FILE_PATH: ""
  FILE_URL: ""

  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  check:
    name: Check file
    runs-on: ubuntu-latest

    outputs:
      modified: ${{ steps.check_modification.outputs.modified }}
      version: ${{ steps.extract_versions.outputs.version }}
      version_full: ${{ steps.extract_versions.outputs.version_full }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get files
        run: wget $FILE_URL -O $FILE_PATH

      # 检查文件是否被修改
      - name: Check if file is modified
        id: check_modification
        run: |
          if git diff --exit-code "$FILE_PATH"; then
            echo "modified=false" >> $GITHUB_OUTPUT
          else
            echo "modified=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract versions
        if: steps.check_modification.outputs.modified == 'true'
        id: extract_versions
        run: |
          # 修改这个地方来匹配对应的 tag 和 version
          VERSION=
          VERSION_FULL=

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_full=$VERSION_FULL" >> $GITHUB_OUTPUT

      - name: Use extracted versions
        if: steps.check_modification.outputs.modified == 'true'
        run: |
          echo "Version: ${{ steps.extract_versions.outputs.version }}"
          echo "Full version: ${{ steps.extract_versions.outputs.version_full }}"

      - name: Update Dockerfile
        if: steps.check_modification.outputs.modified == 'true'
        run: |
          # 更改 Dockerfile 中的对应参数

      - name: Push file to repo
        if: steps.check_modification.outputs.modified == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          git add Dockerfile $FILE_PATH
          
          # 提交更改
          git commit -m "Update files"
          
          # 推送更改到远程存储库
          git push

      # 如果文件未修改，则退出工作流程
      - name: Exit if file is not modified
        if: steps.check_modification.outputs.modified == 'false'
        run: |
          echo "File has not been modified. Exiting workflow."
          exit 0

  build-docker:
    runs-on: ubuntu-latest
    needs: [check] 
    if: ${{ needs.check.outputs.modified == 'true' }}

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.3.0
        with:
          cosign-release: 'v2.2.2'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ needs.check.outputs.version_full }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
